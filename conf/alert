# This configuration file is used by salt-alert.

##### Primary configuration settings #####
##########################################
# The address of the interface to bind to
#interface: 0.0.0.0
#
# The number of worker threads to start, these threads are used to manage
# return calls made from minions to the master, if the master seems to be
# running slowly, increase the number of threads
#worker_threads: 3
#
# The port to begin binding workers on, the workers will be created on
# increasingly higher ports
#worker_start_port: 45156

# The port used by the communication interface
#ret_port: 4507

# The root directory prepended to these options: pki_dir, cachedir, log_file.
#root_dir: /

# Directory used to store public key data
#pki_dir: /etc/salt/pki

# Directory to store job and cache data
#cachedir: /var/cache/salt

#####        Security settings       #####
##########################################
# Enable "open mode", this mode still maintains encryption, but turns off
# authentication, this is only intended for highly secure environments or for
# the situation where your keys end up in a bad state. If you run in open more
# you do so at your own risk!
#open_mode: False

# Enable auto_accept, this setting will automatically accept all incoming
# public keys from the minions
#auto_accept: False

#####         Cluster settings       #####
##########################################
# Salt supports automatic clustering, salt creates a single ip address which
# is shared among the individual salt components using ucarp. The private key
# and all of the minion keys are maintained across the defined cluster masters
# The failover service is automatically managed via these settings

# List the identifiers for the other cluster masters in this manner:
# [saltmaster-01.foo.com,saltmaster-02.foo.com,saltmaster-03.foo.com]
# The members of this master array must be running as salt minions to
# facilitate the distribution of cluster information
#cluster_masters: []

# The cluster modes are "paranoid" and "full"
# paranoid will only distribute the accepted minion public keys.
# full will also distribute the master private key.
#cluster_mode: paranoid

######         Logging settings       #####
###########################################
# The location of the alert log file
#log_file: /var/log/salt/alert
# The level of messages to send to the log file.
# One of 'info', 'quiet', 'critical', 'error', 'debug', 'warning'.
# Default: 'warning'
#log_level: warning
#
# Logger levels can be used to tweak specific loggers logging levels.
# Imagine you want to have the salt library at the 'warning' level, but, you
# still wish to have 'salt.modules' at the 'debug' level:
#   log_granular_levels: {
#     'salt': 'warning',
#     'salt.modules': 'debug'
#   }
#
#log_granular_levels: {}

######     Alert configuration        #####
###########################################

# Alert providers deliver alerts to users.  Typically providers include
# email and instant message services, but in the future may include SMS or
# pager services.

# How time should be formatted (see strftime for options) and what
# timezone time is displayed in.
#alert.time:
#  format: '%c %Z'
#  timezone: UTC

# Possible values for ${verb}.  When an alert is triggered the 'raised'
# verb is used.  When the condition that triggered the alert no longer
# exists, the alert may be resent with the 'cleared' verb.
#alert.verbs:
#  raised: occurred
#  cleared: resolved

######        Alert agents            #####
###########################################
# Alert agents deliver alerts to subscribers.
# The agent messages may contain the following variables:
#      ${severity} = alert severity in lower case, e.g. warning
#      ${SEVERITY} = alert severity in upper case, e.g. WARNING
#      ${category} = alert category, e.g. disk.full
#      ${msg}      = alert message
#      ${time}     = alert date and time
#      ${host}     = host alert occurred on
#      ${verb}     = verb used to distinguish whether the alert was
#                    raised ("occurred") or cleared ("resolved")

######     Email alert agent          #####
###########################################
#alert.email:
#  smtp:
#    host: smtp.gmail.com
#    port: 25 or 587
#    user: myagent@gmail.com
#    password: mypassword
#  from: My Agent Alert <myagent@gmail.com>
#  subject: '${SEVERITY} ${verb} on ${host}: ${msg}'
#  headers:
#    X-Priority: 1
#  body: |
#    ${msg}
#
#    severity: ${severity}
#    category: ${category}
#    host:     ${host}
#    time:     ${time}

######  Jabber (XMPP) alert agent(s)  #####
###########################################
# Jabber agent configuration:
#   host         = optional Jabber server FQDN.  If not specified, it is
#                  parsed from the user address.  You will have to specify
#                  this for GTalk if you do not have dnspython installed
#                  (since the server is gtalk.google.com, not gmail.com as
#                  implied by the gtalk addresses).
#   port         = optional Jabber server port.  Default = 5222.
#   user         = Jabber user sending alerts
#   password     = Jabber user's password
#   max_msgs     = maximum number of messages to buffer for each offline and
#                  unauthorized alert recipient.  Default = 50.
#                  Set to 0 to buffer an unlimited number of messages.
#   max_age      = maximum number of seconds to buffer a message to an
#                  offline or unauthorized recipient.  Default = 3600
#                  (1 hour).  Set to 0 to buffer forever.
#   msgs_per_sec = maximum message per second that can be sent to the
#                  server.  Gtalk only accepts 1 msg per 10 seconds
#   message      = message template used for messages to all Jabber
#                  recipients.  See above for available ${var} variables.
#alert.jabber:
#  gtalk:
#    host: talk.google.com
#    port: 5222
#    user: myagent@gmail.com
#    password: mypassword
#    max_msgs: 50
#    max_age: 3600
#    msgs_per_sec: 0.1
#  mycompany:
#    host: chat.example.com
#    port: 5222
#    user: myagent@example.com
#    password: mypassword
#  message: |
#    ${SEVERITY} ${category} ${verb} on ${host}:
#    ${msg}


######     Alert subscriptions        #####
###########################################
# A subscription is a regular expression that matches the alert's
# category and severity plus a list of subscribers.
#
# The category and alert are concatenated into single string separated
# by a '/', e.g. 'disk.spindle/error'.  The regex can match specific
# categories like this 'disk.*/.*', specific severities like this '.*/error',
# or combinations of categories and severities like this 'disk.*/error'.
# To match all alerts use '.*'.
#
# The subcribers are a list of addresses prefixed with the agent used
# to deliver the alert.  For example, to specify the 'foobar' gtalk user,
# use 'gtalk:foobar'.  If the agent prefix is missing, it defaults to 'email',
# e.g. 'foobar@example.com' is equivalent to 'email:foobar@example.com'.
# Email subscribers can be specified as a plain email address, e.g.
# 'foobar@example.com', or as a real name and email address, e.g.
# 'Big Dog <foobar@example.com>'.

alert.subscriptions:
#  disk.*/(warning|error|critical): gtalk:diskadmin
#  .*/(warning|error|critical|notice): [gtalk:admins, Boss <mgr@example.com>]
#  .*: [gtalk:loggerbot, On-call Admins <oncall@example.com>]
